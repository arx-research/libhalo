name: Release halocli tool

on:
  push:
    tags:
      - 'halocli-v*'

jobs:
  create_release:
    name: Create halocli release
    runs-on: ubuntu-latest
    steps:
      - name: Prepare version number
        id: parse_version
        run: |
          ( echo -n "version=" && ( echo "$GITHUB_REF" | cut -f2 -d- | tr -d '\n' ) ) >> "$GITHUB_OUTPUT"
      - name: Draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: HaLo CLI ${{ steps.parse_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            Standalone command line tool for desktop computers with PC/SC readers (USB/NFC readers).
            
            Release contents:
            * `halocli-linux-x64.zip` - Linux x64 build (elf; zipped)
            * `halocli-win-x64.exe` - Windows 64 build (exe; signed)
            * `halocli-macos-x64.pkg` - Mac OS x64 build (installer; signed)
            
            **Note:** The files `*-keyless.sig` and `*-keyless.pem` constitute a part of [build audit trail](https://github.com/arx-research/libhalo/blob/master/docs/build-audit-trail.md).
      - name: Store release upload URL
        run: |
          echo -n "${{ steps.create_release.outputs.upload_url }}" > release-upload-url.txt
      - name: Store release upload URL artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-upload-url
          path: release-upload-url.txt

  build_cli_tool:
    permissions:
      id-token: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            bin_name: halocli
          - os: windows-latest
            bin_name: halocli.exe
          - os: macos-latest
            bin_name: halocli
    name: Build halocli (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: create_release
    steps:
      - name: Install native dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y libpcsclite-dev
      - name: Install native dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pcsc-lite
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install Node.JS
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies (root)
        run: |
          npm --include=dev ci
      - name: Install dependencies (cli)
        run: |
          cd cli
          npm --include=dev ci
      - name: Package HaLo CLI tool (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd cli
          node_modules/.bin/pkg -t node16-linux-x64 package.json
      - name: Compress application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd ./cli/dist
          zip halocli-linux-x64.zip halocli
      - name: Package HaLo CLI tool (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd cli
          node_modules/.bin/pkg -t node16-win-x64 package.json
      - name: Package HaLo CLI tool (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd cli
          node_modules/.bin/pkg -t node16-macos-x64 package.json
      - name: Store Entitlements.plist in dist
        if: matrix.os == 'macos-latest'
        run:
          mv ./cli/Entitlements.plist ./cli/dist/Entitlements.plist
      - name: Install cosign
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65
      - name: Sign binary with cosign
        run: |
          echo y | cosign sign-blob ./cli/dist/${{ matrix.bin_name }} --output-certificate ./cli/dist/${{ matrix.bin_name }}.pem --output-signature ./cli/dist/${{ matrix.bin_name }}.sig
      - name: Store binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.os }}
          path: ./cli/dist/

  sign_cli_tool:
    environment: production
    permissions:
      contents: write
      id-token: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            bin_name: halocli
            out_name: halocli-linux-x64.zip
          - os: windows-latest
            bin_name: halocli.exe
            out_name: halocli-win-x64.exe
          - os: macos-latest
            bin_name: halocli
            out_name: halocli-macos-x64.pkg
    name: Sign halocli and release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build_cli_tool
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65
      - name: Download binary from artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-${{ matrix.os }}
      - name: Verify signatures from previous stage
        shell: bash
        run: |
          cosign verify-blob --cert ./${{ matrix.bin_name }}.pem --signature ./${{ matrix.bin_name }}.sig --certificate-identity "https://github.com/arx-research/libhalo/.github/workflows/prod_build_cli.yml@${GITHUB_REF}" --certificate-oidc-issuer https://token.actions.githubusercontent.com ./${{ matrix.bin_name }}
          rm ./${{ matrix.bin_name }}.pem
          rm ./${{ matrix.bin_name }}.sig
      - name: Calculate checksum of Entitlements.plist (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          shasum -a 256 Entitlements.plist
      - name: Verify Entitlements.plist (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "bb1c65f6915e18f6e371a76e0b84551756a0e5037e90ef541680c95831fb52a7  Entitlements.plist" > Entitlements.plist.sum
          shasum -a 256 -c Entitlements.plist.sum
      - name: Compress application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip halocli-linux-x64.zip halocli
      - name: Write intermediate certificate file 1 (Windows)
        if: matrix.os == 'windows-latest'
        uses: DamianReeves/write-file-action@0a7fcbe1960c53fc08fe789fa4850d24885f4d84
        with:
          path: ./intermediate1.cer
          write-mode: overwrite
          contents: |
            -----BEGIN CERTIFICATE-----
            MIIFojCCBIqgAwIBAgIQeAMYQkVwikHPbwG47rSpVDANBgkqhkiG9w0BAQwFADBM
            MSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEGA1UEChMKR2xv
            YmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjAeFw0yMDA3MjgwMDAwMDBaFw0y
            OTAzMTgwMDAwMDBaMFMxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWdu
            IG52LXNhMSkwJwYDVQQDEyBHbG9iYWxTaWduIENvZGUgU2lnbmluZyBSb290IFI0
            NTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALYtxTDdeuirkD0DcrA6
            S5kWYbLl/6VnHTcc5X7sk4OqhPWjQ5uYRYq4Y1ddmwCIBCXp+GiSS4LYS8lKA/Oo
            f2qPimEnvaFE0P31PyLCo0+RjbMFsiiCkV37WYgFC5cGwpj4LKczJO5QOkHM8KCw
            ex1N0qhYOJbp3/kbkbuLECzSx0Mdogl0oYCve+YzCgxZa4689Ktal3t/rlX7hPCA
            /oRM1+K6vcR1oW+9YRB0RLKYB+J0q/9o3GwmPukf5eAEh60w0wyNA3xVuBZwXCR4
            ICXrZ2eIq7pONJhrcBHeOMrUvqHAnOHfHgIB2DvhZ0OEts/8dLcvhKO/ugk3PWds
            sUVcGWGrQYP1rB3rdw1GR3POv72Vle2dK4gQ/vpY6KdX4bPPqFrpByWbEsSegHI9
            k9yMlN87ROYmgPzSwwPwjAzSRdYu54+YnuYE7kJuZ35CFnFi5wT5YMZkobacgSFO
            K8ZtaJSGxpl0c2cxepHy1Ix5bnymu35Gb03FhRIrz5oiRAiohTfOB2FXBhcSJMDE
            MXOhmDVXR34QOkXZLaRRkJipoAc3xGUaqhxrFnf3p5fsPxkwmW8x++pAsufSxPrJ
            0PBQdnRZ+o1tFzK++Ol+A/Tnh3Wa1EqRLIUDEwIrQoDyiWo2z8hMoM6e+MuNrRan
            097VmxinxpI68YJj8S4OJGTfAgMBAAGjggF3MIIBczAOBgNVHQ8BAf8EBAMCAYYw
            EwYDVR0lBAwwCgYIKwYBBQUHAwMwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU
            HwC/RoAK/Hg5t6W0Q9lWULvOljswHwYDVR0jBBgwFoAUj/BLf6guRSSuTVD6Y5qL
            3uLdG7wwegYIKwYBBQUHAQEEbjBsMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5n
            bG9iYWxzaWduLmNvbS9yb290cjMwOwYIKwYBBQUHMAKGL2h0dHA6Ly9zZWN1cmUu
            Z2xvYmFsc2lnbi5jb20vY2FjZXJ0L3Jvb3QtcjMuY3J0MDYGA1UdHwQvMC0wK6Ap
            oCeGJWh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vcm9vdC1yMy5jcmwwRwYDVR0g
            BEAwPjA8BgRVHSAAMDQwMgYIKwYBBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNp
            Z24uY29tL3JlcG9zaXRvcnkvMA0GCSqGSIb3DQEBDAUAA4IBAQCs98wVizB5qB0L
            KIgZCdccf/6GvXtaM24NZw57YtnhGFywvRNdHSOuOVB2N6pE/V8BI1mGVkzMrbxk
            ExQwpCCo4D/onHLcfvPYDCO6qC2qPPbsn4cxB2X1OadRgnXh8i+X9tHhZZaDZP6h
            HVH7tSSb9dJ3abyFLFz6WHfRrqexC+LWd7uptDRKqW899PMNlV3m+XpFsCUXMS7b
            9w9o5oMfqffl1J2YjNNhSy/DKH563pMOtH2gCm2SxLRmP32nWO6s9+zDCAGrOPwK
            HKnFl7KIyAkCGfZcmhrxTWww1LMGqwBgSA14q88XrZKTYiB3dWy9yDK03E3r2d/B
            kJYpvcF/
            -----END CERTIFICATE-----
      - name: Write intermediate certificate file 2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: DamianReeves/write-file-action@0a7fcbe1960c53fc08fe789fa4850d24885f4d84
        with:
          path: ./intermediate2.cer
          write-mode: overwrite
          contents: |
            -----BEGIN CERTIFICATE-----
            MIIG6DCCBNCgAwIBAgIQd70OBbdZC7YdR2FTHj917TANBgkqhkiG9w0BAQsFADBT
            MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEpMCcGA1UE
            AxMgR2xvYmFsU2lnbiBDb2RlIFNpZ25pbmcgUm9vdCBSNDUwHhcNMjAwNzI4MDAw
            MDAwWhcNMzAwNzI4MDAwMDAwWjBcMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xv
            YmFsU2lnbiBudi1zYTEyMDAGA1UEAxMpR2xvYmFsU2lnbiBHQ0MgUjQ1IEVWIENv
            ZGVTaWduaW5nIENBIDIwMjAwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
            AQDLIO+XHrkBMkOgW6mKI/0gXq44EovKLNT/QdgaVdQZU7f9oxfnejlcwPfOEaP5
            pe0B+rW6k++vk9z44rMZTIOwSkRQBHiEEGqk1paQjoH4fKsvtaNXM9JYe5QObQ+l
            kSYqs4NPcrGKe2SS0PC0VV+WCxHlmrUsshHPJRt9USuYH0mjX/gTnjW4AwLapBMv
            hUrvxC9wDsHUzDMS7L1AldMRyubNswWcyFPrUtd4TFEBkoLeE/MHjnS6hICf0qQV
            Duiv6/eJ9t9x8NG+p7JBMyB1zLHV7R0HGcTrJnfyq20Xk0mpt+bDkJzGuOzMyXua
            XsXFJJNjb34Qi2HPmFWjJKKINvL5n76TLrIGnybADAFWEuGyip8OHtyYiy7P2uKJ
            NKYfJqCornht7KGIFTzC6u632K1hpa9wNqJ5jtwNc8Dx5CyrlOxYBjk2SNY7Wugi
            znQOryzxFdrRtJXorNVJbeWv3ZtrYyBdjn47skPYYjqU5c20mLM3GSQScnOrBLAJ
            3IXm1CIE70AqHS5tx2nTbrcBbA3gl6cW5iaLiPcDRIZfYmdMtac3qFXcAzaMbs9t
            NibxDo+wPXHA4TKnguS2MgIyMHy1k8gh/TyI5mlj+O51yYvCq++6Ov3pXr+2EfG+
            8D3KMj5ufd4PfpuVxBKH5xq4Tu4swd+hZegkg8kqwv25UwIDAQABo4IBrTCCAakw
            DgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMDMBIGA1UdEwEB/wQI
            MAYBAf8CAQAwHQYDVR0OBBYEFCWd0PxZCYZjxezzsRM7VxwDkjYRMB8GA1UdIwQY
            MBaAFB8Av0aACvx4ObeltEPZVlC7zpY7MIGTBggrBgEFBQcBAQSBhjCBgzA5Bggr
            BgEFBQcwAYYtaHR0cDovL29jc3AuZ2xvYmFsc2lnbi5jb20vY29kZXNpZ25pbmdy
            b290cjQ1MEYGCCsGAQUFBzAChjpodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29t
            L2NhY2VydC9jb2Rlc2lnbmluZ3Jvb3RyNDUuY3J0MEEGA1UdHwQ6MDgwNqA0oDKG
            MGh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vY29kZXNpZ25pbmdyb290cjQ1LmNy
            bDBVBgNVHSAETjBMMEEGCSsGAQQBoDIBAjA0MDIGCCsGAQUFBwIBFiZodHRwczov
            L3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAHBgVngQwBAzANBgkqhkiG
            9w0BAQsFAAOCAgEAJXWgCck5urehOYkvGJ+r1usdS+iUfA0HaJscne9xthdqawJP
            sz+GRYfMZZtM41gGAiJm1WECxWOP1KLxtl4lC3eW6c1xQDOIKezu86JtvE21PgZL
            yXMzyggULT1M6LC6daZ0LaRYOmwTSfilFQoUloWxamg0JUKvllb0EPokffErcsEW
            4Wvr5qmYxz5a9NAYnf10l4Z3Rio9I30oc4qu7ysbmr9sU6cUnjyHccBejsj70yqS
            M+pXTV4HXsrBGKyBLRoh+m7Pl2F733F6Ospj99UwRDcy/rtDhdy6/KbKMxkrd23b
            ywXwfl91LqK2vzWqNmPJzmTZvfy8LPNJVgDIEivGJ7s3r1fvxM8eKcT04i3OKmHP
            V+31CkDi9RjWHumQL8rTh1+TikgaER3lN4WfLmZiml6BTpWsVVdD3FOLJX48YQ+K
            C7r1P6bXjvcEVl4hu5/XanGAv5becgPY2CIr8ycWTzjoUUAMrpLvvj1994DGTDZX
            hJWnhBVIMA5SJwiNjqK9IscZyabKDqh6NttqumFfESSVpOKOaO4ZqUmZXtC0NL3W
            +UDHEJcxUjk1KRGHJNPE+6ljy3dI1fpi/CTgBHpO0ORu3s6eOFAm9CFxZdcJJdTJ
            BwB6uMfzd+jF1OJV0NMe9n9S4kmNuRFyDIhEJjNmAUTf5DMOId5iiUgH2vU=
            -----END CERTIFICATE-----
      - name: Sign application (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet tool install --global AzureSignTool
          AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc "${{ secrets.AZURE_CERT_NAME }}" -ac intermediate1.cer -ac intermediate2.cer -tr http://timestamp.globalsign.com/tsa/r6advanced1 -v halocli.exe
          mv halocli.exe halocli-win-x64.exe
      - name: Load signing credentials (Mac OS)
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGN_P12 }}
          p12-password: ${{ secrets.MACOS_SIGN_P12_PASSWORD }}
      - name: Sign application (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p root/usr/local/bin/
          mv halocli root/usr/local/bin/halocli
          /usr/bin/codesign --deep --force --options=runtime --entitlements ./Entitlements.plist --sign "${{ secrets.MACOS_SIGN_IDENTITY_APPLICATION }}" --timestamp ./root/usr/local/bin/halocli
          pkgbuild --root ./root --identifier "org.arx.halo.halocli" --version "1.0.$(date +%s)" --install-location "/" --sign "${{ secrets.MACOS_SIGN_IDENTITY_INSTALLER }}" ./halocli-macos-x64.pkg
      - name: Notarize application for Mac OS
        if: matrix.os == 'macos-latest'
        run: |
          xcrun notarytool submit "--apple-id=${{ secrets.MACOS_NOTARIZE_APPLE_ID }}" "--password=${{ secrets.MACOS_NOTARIZE_PASSWORD }}" "--team-id=${{ secrets.MACOS_NOTARIZE_TEAM_ID }}" --progress --wait ./halocli-macos-x64.pkg
      - name: Staple notarized application (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          xcrun stapler staple ./halocli-macos-x64.pkg
          rm -rf ./root/
      - name: Download release upload URL
        uses: actions/download-artifact@v3
        with:
          name: release-upload-url
      - name: Store release upload URL output
        id: out_store
        shell: bash
        run: |
          echo "release_upload_url=$(cat release-upload-url.txt)" >> "$GITHUB_OUTPUT"
      - name: Sign output binaries with cosign
        run: |
          echo y | cosign sign-blob ./${{ matrix.out_name }} --output-certificate ./${{ matrix.out_name }}-keyless.pem --output-signature ./${{ matrix.out_name }}-keyless.sig
      - name: Upload release asset (binary)
        id: upload-release-asset-binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.out_store.outputs.release_upload_url }}
          asset_path: ./${{ matrix.out_name }}
          asset_name: ${{ matrix.out_name }}
          asset_content_type: application/octet-stream
      - name: Upload release asset (cosign pem)
        id: upload-release-asset-cosign-pem
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.out_store.outputs.release_upload_url }}
          asset_path: ./${{ matrix.out_name }}-keyless.pem
          asset_name: ${{ matrix.out_name }}-keyless.pem
          asset_content_type: application/octet-stream
      - name: Upload release asset (cosign sig)
        id: upload-release-asset-cosign-sig
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.out_store.outputs.release_upload_url }}
          asset_path: ./${{ matrix.out_name }}-keyless.sig
          asset_name: ${{ matrix.out_name }}-keyless.sig
          asset_content_type: application/octet-stream
      - name: Delete binary artifact
        if: always()
        uses: geekyeggo/delete-artifact@54ab544f12cdb7b71613a16a2b5a37a9ade990af
        with:
          name: binary-${{ matrix.os }}
